#include "cores.hpp"

namespace nesbrasa::nucleo::cores
{
    cor_rgb buscar_cor_rgb(byte valor)
    {
        return tabela_rgb.at(valor % 0x40);
    }

    array<cor_rgb, 0x40> tabela_rgb {
        //        R      G      B
        cor_rgb { 0x084, 0x084, 0x084, }, // $00
        cor_rgb { 0x000, 0x030, 0x116, }, // $01
        cor_rgb { 0x008, 0x016, 0x144, }, // $02
        cor_rgb { 0x048, 0x000, 0x136, }, // $03
        cor_rgb { 0x068, 0x000, 0x100, }, // $04
        cor_rgb { 0x092, 0x000, 0x048, }, // $05
        cor_rgb { 0x084, 0x004, 0x000, }, // $06
        cor_rgb { 0x060, 0x024, 0x000, }, // $07
        cor_rgb { 0x032, 0x042, 0x000, }, // $08
        cor_rgb { 0x008, 0x058, 0x000, }, // $09
        cor_rgb { 0x000, 0x064, 0x000, }, // $0A
        cor_rgb { 0x000, 0x060, 0x000, }, // $0B
        cor_rgb { 0x000, 0x050, 0x060, }, // $0C
        cor_rgb { 0x000, 0x000, 0x000, }, // $0D
        cor_rgb { 0x000, 0x000, 0x000, }, // $0E
        cor_rgb { 0x000, 0x000, 0x000, }, // $0F
        cor_rgb { 0x152, 0x150, 0x152, }, // $10
        cor_rgb { 0x008, 0x076, 0x196, }, // $11
        cor_rgb { 0x040, 0x050, 0x236, }, // $12
        cor_rgb { 0x092, 0x030, 0x228, }, // $13
        cor_rgb { 0x136, 0x020, 0x176, }, // $14
        cor_rgb { 0x160, 0x020, 0x100, }, // $15
        cor_rgb { 0x152, 0x034, 0x032, }, // $16
        cor_rgb { 0x120, 0x060, 0x000, }, // $17
        cor_rgb { 0x084, 0x090, 0x000, }, // $18
        cor_rgb { 0x040, 0x114, 0x000, }, // $19
        cor_rgb { 0x008, 0x124, 0x000, }, // $1A
        cor_rgb { 0x000, 0x118, 0x040, }, // $1B
        cor_rgb { 0x000, 0x102, 0x120, }, // $1C
        cor_rgb { 0x000, 0x000, 0x000, }, // $1D
        cor_rgb { 0x000, 0x000, 0x000, }, // $1E
        cor_rgb { 0x000, 0x000, 0x000, }, // $1F
        cor_rgb { 0x236, 0x238, 0x236, }, // $20
        cor_rgb { 0x076, 0x154, 0x236, }, // $21
        cor_rgb { 0x120, 0x124, 0x236, }, // $22
        cor_rgb { 0x176, 0x098, 0x236, }, // $23
        cor_rgb { 0x228, 0x084, 0x236, }, // $24
        cor_rgb { 0x236, 0x088, 0x180, }, // $25
        cor_rgb { 0x236, 0x106, 0x100, }, // $26
        cor_rgb { 0x212, 0x136, 0x032, }, // $27
        cor_rgb { 0x160, 0x170, 0x000, }, // $28
        cor_rgb { 0x116, 0x196, 0x000, }, // $29
        cor_rgb { 0x076, 0x208, 0x032, }, // $2A
        cor_rgb { 0x056, 0x204, 0x108, }, // $2B
        cor_rgb { 0x056, 0x180, 0x204, }, // $2C
        cor_rgb { 0x060, 0x060, 0x060, }, // $2D
        cor_rgb { 0x000, 0x000, 0x000, }, // $2E
        cor_rgb { 0x000, 0x000, 0x000, }, // $2F
        cor_rgb { 0x263, 0x238, 0x263, }, // $30
        cor_rgb { 0x168, 0x204, 0x236, }, // $31
        cor_rgb { 0x188, 0x188, 0x236, }, // $32
        cor_rgb { 0x212, 0x178, 0x236, }, // $33
        cor_rgb { 0x236, 0x174, 0x236, }, // $34
        cor_rgb { 0x236, 0x174, 0x212, }, // $35
        cor_rgb { 0x236, 0x180, 0x176, }, // $36
        cor_rgb { 0x228, 0x196, 0x144, }, // $37
        cor_rgb { 0x204, 0x210, 0x120, }, // $38
        cor_rgb { 0x180, 0x222, 0x120, }, // $39
        cor_rgb { 0x168, 0x226, 0x144, }, // $3A
        cor_rgb { 0x152, 0x226, 0x180, }, // $3B
        cor_rgb { 0x160, 0x214, 0x228, }, // $3C
        cor_rgb { 0x160, 0x162, 0x160, }, // $3D 
        cor_rgb { 0x000, 0x000, 0x000, }, // $3E
        cor_rgb { 0x000, 0x000, 0x000, }, // $3F
    };
}